name: Build Model and Predict (Commit outputs)

on:
  workflow_dispatch:
    inputs:
      week:
        description: "CFB Week number (e.g., 5)"
        required: true
        default: "5"
      ref:
        description: "Branch or ref to commit to (default: current)"
        required: false
        default: ""
  push:
    branches:
      - main
      - fix/**
    paths:
      - "docs/input/**"
      - "scripts/**"
      - "data/raw/cfbd/**"
      - "requirements.txt"

permissions:
  contents: write

jobs:
  build-and-predict:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    concurrency:
      group: build-predict-${{ github.ref }}
    env:
      CFBD_API_KEY: ${{ secrets.CFBD_API_KEY }}
      PYTHONUNBUFFERED: "1"
      WEEK: ${{ github.event.inputs.week }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Ensure raw data exists
        run: |
          if [ ! -f data/raw/cfbd/cfb_schedule.csv ]; then
            echo "::error::data/raw/cfbd/cfb_schedule.csv not found. Run the 'Fetch CFBD Data' workflow first."
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ---------- DERIVED CACHE: restore if raw+code unchanged ----------
      - name: Compute cache key
        id: ck
        run: |
          echo "key=train-$(python - <<'PY'
import hashlib, glob
def hfile(p):
  try:
    with open(p,'rb') as f: return hashlib.sha256(f.read()).hexdigest()
  except: return 'x'
parts=[]
for p in sorted(glob.glob('data/raw/cfbd/*.csv')): parts.append(hfile(p))
for p in sorted(glob.glob('scripts/**/*.py', recursive=True)): parts.append(hfile(p))
for p in ['requirements.txt']: parts.append(hfile(p))
key=hashlib.sha256(('\n'.join(parts)).encode()).hexdigest()[:16]
print(key)
PY
)"
          echo "key=${key}" >> "$GITHUB_OUTPUT"

      - name: Restore derived cache
        id: cache-derived
        uses: actions/cache@v4
        with:
          path: |
            data/derived
          key: ${{ steps.ck.outputs.key }}

      - name: Check derived presence
        id: has-derived
        run: |
          if [ -f data/derived/training.parquet ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Build dataset only on cache miss ----------
      - name: Build dataset (chunked/streaming)
        if: steps.has-derived.outputs.present == 'false'
        run: python -m scripts.build_dataset

      - name: Save derived cache (after build)
        if: steps.has-derived.outputs.present == 'false'
        uses: actions/cache@v4
        with:
          path: |
            data/derived
          key: ${{ steps.ck.outputs.key }}

      # ---------- Train & Predict ----------
      - name: Train model
        run: python -m scripts.train_model

      - name: Predict games for week
        run: |
          W="${WEEK:-5}"
          echo "Predicting Week ${W}"
          python -m scripts.predict --week "${W}"

      - name: Commit & push predictions/meta
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A docs/data/predictions.json docs/data/train_meta.json
          if ! git diff --cached --quiet; then
            MSG="chore(predictions): update Week ${WEEK:-manual} $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git commit -m "$MSG"
            TARGET_REF="${{ github.event.inputs.ref || github.ref_name }}"
            git push origin "HEAD:${TARGET_REF}"
          else
            echo "No prediction output changes to commit."
          fi

      - name: List outputs
        run: ls -l docs/data || true
